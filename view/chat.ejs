<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Trauma Assistant Chat</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --background-start: #141E30;
      --background-end: #243B55;
      --sidebar-bg: rgba(20, 30, 48, 0.7);
      --chat-bg: #1a2639;
      --card-border: rgba(255, 255, 255, 0.15);
      --primary-text: #E0E0E0;
      --secondary-text: #a0a0a0;
      --accent-color: #4A90E2;
      --accent-hover: #357ABD;
      --user-msg-bg: #4A90E2;
      --bot-msg-bg: #30405a;
    }

    * { box-sizing: border-box; margin: 0; padding: 0; }
    
    html, body { 
      height: 100%; 
      width: 100%; 
      overflow: hidden; 
      font-family: 'Inter', system-ui, sans-serif; 
      background: linear-gradient(135deg, var(--background-start), var(--background-end));
      color: var(--primary-text);
    }
    
    .app { display: flex; height: 100%; width: 100%; }
    
    /* --- Sidebar --- */
    .sidebar {
      width: 260px;
      background: var(--sidebar-bg);
      backdrop-filter: blur(12px);
      -webkit-backdrop-filter: blur(12px);
      border-right: 1px solid var(--card-border);
      display: flex;
      flex-direction: column;
      padding: 16px;
    }
    .sidebar h2 { 
      font-size: 22px; 
      margin-bottom: 20px; 
      text-align: center; 
      font-weight: 700;
    }
    .new-chat-btn { 
      background: var(--accent-color); 
      color: #fff; border: none; 
      padding: 12px; 
      margin-bottom: 16px; 
      border-radius: 8px; 
      cursor: pointer; 
      font-size: 15px; 
      font-weight: 600;
      transition: background-color 0.3s ease, transform 0.2s ease;
    }
    .new-chat-btn:hover {
        background-color: var(--accent-hover);
        transform: translateY(-2px);
    }

    .history { 
      flex: 1; 
      overflow-y: auto; 
      scrollbar-width: thin;
      scrollbar-color: var(--accent-color) transparent;
    }
    .history-item { 
      padding: 12px; 
      margin-bottom: 8px; 
      border-radius: 6px; 
      background: rgba(255, 255, 255, 0.05);
      cursor: pointer; 
      font-size: 14px;
      transition: background-color 0.3s ease;
    }
    .history-item:hover { background: rgba(255, 255, 255, 0.1); }
    .history-item.active { 
        background: var(--accent-color); 
        color: #fff;
        font-weight: 500;
    }
    
    /* --- Chat Area --- */
    .chat-area { 
      flex: 1; 
      display: flex; 
      flex-direction: column; 
      height: 100%; 
      background: var(--chat-bg); 
    }
    .chat-header { 
      background: var(--sidebar-bg);
      backdrop-filter: blur(10px);
      border-bottom: 1px solid var(--card-border);
      color: white; 
      padding: 16px; 
      font-size: 18px; 
      font-weight: bold; 
      text-align: center; 
    }
    .chat-box { 
      flex: 1; 
      padding: 20px; 
      overflow-y: auto; 
      scrollbar-width: thin;
      scrollbar-color: var(--accent-color) transparent;
    }
    .message { 
      max-width: 75%; 
      padding: 12px 18px; 
      margin-bottom: 12px; 
      border-radius: 18px; 
      line-height: 1.5; 
      word-wrap: break-word; 
      animation: fadeIn 0.4s ease-out; 
    }
    .user-message { 
      background: var(--user-msg-bg); 
      color: white; 
      margin-left: auto; 
      border-bottom-right-radius: 4px; 
    }
    .bot-message { 
      background: var(--bot-msg-bg); 
      color: var(--primary-text); 
      margin-right: auto; 
      border-bottom-left-radius: 4px; 
    }
    .chat-input { 
      display: flex; 
      gap: 10px;
      padding: 12px 20px; 
      background: var(--sidebar-bg);
      border-top: 1px solid var(--card-border);
      backdrop-filter: blur(10px);
    }
    .chat-input textarea { 
      flex: 1; 
      resize: none; 
      background: transparent;
      border: 1px solid var(--card-border);
      color: var(--primary-text);
      border-radius: 12px; 
      padding: 14px; 
      font-size: 15px; 
      outline: none; 
      max-height: 150px;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }
    .chat-input textarea:focus {
        border-color: var(--accent-color);
        box-shadow: 0 0 10px rgba(74, 144, 226, 0.5);
    }
    .chat-input textarea:disabled { background: rgba(0,0,0,0.2); cursor: not-allowed; }
    
    .chat-input button { 
      background: var(--accent-color); 
      color: white; border: none; 
      border-radius: 12px; 
      width: 50px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 16px; 
      cursor: pointer; 
      transition: background-color 0.3s ease; 
    }
    .chat-input button:hover:not(:disabled) { background: var(--accent-hover); }
    .chat-input button:disabled { background: #555; cursor: not-allowed; }
    
    @keyframes fadeIn { from {opacity: 0; transform: translateY(10px);} to {opacity: 1; transform: translateY(0);} }
  </style>
</head>
<body>
  <div class="app">
    <!-- Sidebar -->
    <div class="sidebar">
      <h2>MindLiftAI</h2>
      <button class="new-chat-btn" onclick="newChat()">+ New Chat</button>
      <div class="history" id="history"></div>
    </div>

    <!-- Chat Area -->
    <div class="chat-area">
      <div class="chat-header">🧠 Hi <%= name %>, I'm your Trauma Assistant</div>
      <div class="chat-box" id="chat-box">
        <div class="bot-message message">
          How are you feeling today?
        </div>
      </div>
      <div class="chat-input">
        <textarea id="user-input" rows="1" placeholder="Type a message..."></textarea>
        <button id="send-btn" onclick="sendMessage()">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>
        </button>
      </div>
    </div>
  </div>

  <script>
    const chatBox = document.getElementById("chat-box");
    const userInput = document.getElementById("user-input");
    const sendBtn = document.getElementById("send-btn");
    const historyBox = document.getElementById("history");
    
    // User ID from session (passed from backend)
    const userId = "<%= userId || 'default' %>";
    let currentChatId = null;
    let chatSessions = {};

    // Initialize with default chat
    initializeDefaultChat();

    function initializeDefaultChat() {
      currentChatId = 'default';
      chatSessions[currentChatId] = [];
    }

    async function sendMessage() {
      const message = userInput.value.trim();
      if (message === "") return;

      // Disable input while processing
      userInput.disabled = true;
      sendBtn.disabled = true;

      addMessage(message, "user");
      userInput.value = "";
      userInput.style.height = "auto";

      // Show typing indicator
      const typingMsg = document.createElement("div");
      typingMsg.classList.add("message", "bot-message");
      typingMsg.id = "typing-indicator";
      typingMsg.innerText = "Typing...";
      chatBox.appendChild(typingMsg);
      chatBox.scrollTop = chatBox.scrollHeight;

      try {
        const response = await fetch("/chat-api", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ 
            message,
            userId,
            chatId: currentChatId
          })
        });

        const data = await response.json();
        
        // Remove typing indicator
        const typingIndicator = document.getElementById("typing-indicator");
        if (typingIndicator) {
          chatBox.removeChild(typingIndicator);
        }

        if (data.reply) {
          addMessage(data.reply, "bot");
          
          // Store in session
          if (!chatSessions[currentChatId]) {
            chatSessions[currentChatId] = [];
          }
          chatSessions[currentChatId].push(
            { role: "user", text: message },
            { role: "bot", text: data.reply }
          );
        } else {
          addMessage("⚠️ No response from AI.", "bot");
        }

      } catch (err) {
        console.error("Chat error:", err);
        const typingIndicator = document.getElementById("typing-indicator");
        if (typingIndicator) {
          chatBox.removeChild(typingIndicator);
        }
        addMessage("⚠️ Error connecting to Trauma AI. Please try again.", "bot");
      } finally {
        // Re-enable input
        userInput.disabled = false;
        sendBtn.disabled = false;
        userInput.focus();
      }
    }

    function addMessage(text, sender) {
      const messageDiv = document.createElement("div");
      messageDiv.classList.add("message", sender === "user" ? "user-message" : "bot-message");
      messageDiv.innerText = text;
      chatBox.appendChild(messageDiv);
      chatBox.scrollTop = chatBox.scrollHeight;
    }

    function newChat() {
      // Generate unique chat ID
      const chatId = 'chat_' + Date.now();
      currentChatId = chatId;
      chatSessions[chatId] = [];

      // Add to history sidebar
      const chatItem = document.createElement("div");
      chatItem.classList.add("history-item");
      chatItem.dataset.chatId = chatId;
      chatItem.innerText = "Chat " + new Date().toLocaleTimeString();
      chatItem.onclick = () => loadChat(chatId);
      
      // Remove active class from all items
      document.querySelectorAll('.history-item').forEach(item => {
        item.classList.remove('active');
      });
      chatItem.classList.add('active');
      
      historyBox.appendChild(chatItem);

      // Clear chat box
      chatBox.innerHTML = '<div class="bot-message message">Hello, I\'m your Trauma Assistant. How are you feeling today?</div>';
    }

    function loadChat(chatId) {
      currentChatId = chatId;
      
      // Update active state
      document.querySelectorAll('.history-item').forEach(item => {
        item.classList.remove('active');
        if (item.dataset.chatId === chatId) {
          item.classList.add('active');
        }
      });

      // Clear and load messages
      chatBox.innerHTML = '';
      
      const messages = chatSessions[chatId] || [];
       if (messages.length === 0) {
        chatBox.innerHTML = '<div class="bot-message message">Hello, I\'m your Trauma Assistant. How are you feeling today?</div>';
      } else {
        messages.forEach(msg => {
            addMessage(msg.text, msg.role === 'user' ? 'user' : 'bot');
        });
      }
    }

    // Auto-resize input
    userInput.addEventListener("input", () => {
      userInput.style.height = "auto";
      const newHeight = Math.min(userInput.scrollHeight, 150);
      userInput.style.height = newHeight + "px";
    });

    userInput.addEventListener("keypress", function (e) {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });

    // Focus input on load
    userInput.focus();
  </script>
</body>
</html>
